//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_AuthenticationService", Namespace="http://asp.net/ApplicationServices/v200")]
public partial class AuthenticationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback ValidateUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoginOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsLoggedInOperationCompleted;
    
    private System.Threading.SendOrPostCallback LogoutOperationCompleted;
    
    /// <remarks/>
    public AuthenticationService() {
        string urlSetting = System.Configuration.ConfigurationManager.AppSettings["AuthenticationServiceAddress"];
        if ((urlSetting != null))
        {
            this.Url = urlSetting;
        }
        else
        {
            this.Url = "http://localhost:49299/AuthWCF/AuthenticationService.svc";
        }        
    }
    
    /// <remarks/>
    public event ValidateUserCompletedEventHandler ValidateUserCompleted;
    
    /// <remarks/>
    public event LoginCompletedEventHandler LoginCompleted;
    
    /// <remarks/>
    public event IsLoggedInCompletedEventHandler IsLoggedInCompleted;
    
    /// <remarks/>
    public event LogoutCompletedEventHandler LogoutCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://asp.net/ApplicationServices/v200/AuthenticationService/ValidateUser", RequestNamespace="http://asp.net/ApplicationServices/v200", ResponseNamespace="http://asp.net/ApplicationServices/v200", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ValidateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customCredential, out bool ValidateUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidateUserResultSpecified) {
        object[] results = this.Invoke("ValidateUser", new object[] {
                    username,
                    password,
                    customCredential});
        ValidateUserResult = ((bool)(results[0]));
        ValidateUserResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateUser(string username, string password, string customCredential, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateUser", new object[] {
                    username,
                    password,
                    customCredential}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateUser(System.IAsyncResult asyncResult, out bool ValidateUserResult, out bool ValidateUserResultSpecified) {
        object[] results = this.EndInvoke(asyncResult);
        ValidateUserResult = ((bool)(results[0]));
        ValidateUserResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public void ValidateUserAsync(string username, string password, string customCredential) {
        this.ValidateUserAsync(username, password, customCredential, null);
    }
    
    /// <remarks/>    
    public void ValidateUserAsync(string username, string password, string customCredential, object userState) {
        if ((this.ValidateUserOperationCompleted == null)) {
            this.ValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserOperationCompleted);
        }
        this.InvokeAsync("ValidateUser", new object[] {
                    username,
                    password,
                    customCredential}, this.ValidateUserOperationCompleted, userState);
    }
    
    private void OnValidateUserOperationCompleted(object arg) {
        if ((this.ValidateUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://asp.net/ApplicationServices/v200/AuthenticationService/Login", RequestNamespace="http://asp.net/ApplicationServices/v200", ResponseNamespace="http://asp.net/ApplicationServices/v200", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Login([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customCredential, bool isPersistent, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isPersistentSpecified, out bool LoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool LoginResultSpecified) {
        object[] results = this.Invoke("Login", new object[] {
                    username,
                    password,
                    customCredential,
                    isPersistent,
                    isPersistentSpecified});
        LoginResult = ((bool)(results[0]));
        LoginResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogin(string username, string password, string customCredential, bool isPersistent, bool isPersistentSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Login", new object[] {
                    username,
                    password,
                    customCredential,
                    isPersistent,
                    isPersistentSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogin(System.IAsyncResult asyncResult, out bool LoginResult, out bool LoginResultSpecified) {
        object[] results = this.EndInvoke(asyncResult);
        LoginResult = ((bool)(results[0]));
        LoginResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public void LoginAsync(string username, string password, string customCredential, bool isPersistent, bool isPersistentSpecified) {
        this.LoginAsync(username, password, customCredential, isPersistent, isPersistentSpecified, null);
    }
    
    /// <remarks/>
    public void LoginAsync(string username, string password, string customCredential, bool isPersistent, bool isPersistentSpecified, object userState) {
        if ((this.LoginOperationCompleted == null)) {
            this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
        }
        this.InvokeAsync("Login", new object[] {
                    username,
                    password,
                    customCredential,
                    isPersistent,
                    isPersistentSpecified}, this.LoginOperationCompleted, userState);
    }
    
    private void OnLoginOperationCompleted(object arg) {
        if ((this.LoginCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://asp.net/ApplicationServices/v200/AuthenticationService/IsLoggedIn", RequestNamespace="http://asp.net/ApplicationServices/v200", ResponseNamespace="http://asp.net/ApplicationServices/v200", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void IsLoggedIn(out bool IsLoggedInResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsLoggedInResultSpecified) {
        object[] results = this.Invoke("IsLoggedIn", new object[0]);
        IsLoggedInResult = ((bool)(results[0]));
        IsLoggedInResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsLoggedIn(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsLoggedIn", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIsLoggedIn(System.IAsyncResult asyncResult, out bool IsLoggedInResult, out bool IsLoggedInResultSpecified) {
        object[] results = this.EndInvoke(asyncResult);
        IsLoggedInResult = ((bool)(results[0]));
        IsLoggedInResultSpecified = ((bool)(results[1]));
    }
    
    /// <remarks/>
    public void IsLoggedInAsync() {
        this.IsLoggedInAsync(null);
    }
    
    /// <remarks/>
    public void IsLoggedInAsync(object userState) {
        if ((this.IsLoggedInOperationCompleted == null)) {
            this.IsLoggedInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLoggedInOperationCompleted);
        }
        this.InvokeAsync("IsLoggedIn", new object[0], this.IsLoggedInOperationCompleted, userState);
    }
    
    private void OnIsLoggedInOperationCompleted(object arg) {
        if ((this.IsLoggedInCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsLoggedInCompleted(this, new IsLoggedInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://asp.net/ApplicationServices/v200/AuthenticationService/Logout", RequestNamespace="http://asp.net/ApplicationServices/v200", ResponseNamespace="http://asp.net/ApplicationServices/v200", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Logout() {
        this.Invoke("Logout", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Logout", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndLogout(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void LogoutAsync() {
        this.LogoutAsync(null);
    }
    
    /// <remarks/>
    public void LogoutAsync(object userState) {
        if ((this.LogoutOperationCompleted == null)) {
            this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
        }
        this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
    }
    
    private void OnLogoutOperationCompleted(object arg) {
        if ((this.LogoutCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void ValidateUserCompletedEventHandler(object sender, ValidateUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool ValidateUserResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool ValidateUserResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool LoginResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool LoginResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void IsLoggedInCompletedEventHandler(object sender, IsLoggedInCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsLoggedInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsLoggedInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool IsLoggedInResult {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public bool IsLoggedInResultSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
