#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="ThonBase")]
public partial class ThonStarcraftDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBlackList(BlackList instance);
  partial void UpdateBlackList(BlackList instance);
  partial void DeleteBlackList(BlackList instance);
  #endregion
	
	public ThonStarcraftDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ThonSqlServer"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ThonStarcraftDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThonStarcraftDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThonStarcraftDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ThonStarcraftDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<BlackList> BlackLists
	{
		get
		{
			return this.GetTable<BlackList>();
		}
	}
}

[Table(Name="dbo.BlackList")]
public partial class BlackList : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Name;
	
	private System.Guid _ID;
	
	private string _Genre;
	
	private int _Rating;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
	
	public BlackList()
	{
		OnCreated();
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Genre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Genre
	{
		get
		{
			return this._Genre;
		}
		set
		{
			if ((this._Genre != value))
			{
				this.OnGenreChanging(value);
				this.SendPropertyChanging();
				this._Genre = value;
				this.SendPropertyChanged("Genre");
				this.OnGenreChanged();
			}
		}
	}
	
	[Column(Storage="_Rating", DbType="Int NOT NULL")]
	public int Rating
	{
		get
		{
			return this._Rating;
		}
		set
		{
			if ((this._Rating != value))
			{
				this.OnRatingChanging(value);
				this.SendPropertyChanging();
				this._Rating = value;
				this.SendPropertyChanged("Rating");
				this.OnRatingChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
