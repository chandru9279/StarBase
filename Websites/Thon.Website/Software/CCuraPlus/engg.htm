<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Back</title>
<meta name="Microsoft Theme" content="expeditn 011">
<link rel="File-List" href="engg_files/filelist.xml">
<!--[if !mso]>
<style>
v\:*         { behavior: url(#default#VML) }
o\:*         { behavior: url(#default#VML) }
.shape       { behavior: url(#default#VML) }
</style>
<![endif]--><!--[if gte mso 9]>
<xml><o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]-->
</head>

<body background="exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#993300" vlink="#666600" alink="#CC3300">

<!--mstheme--><font face="Book Antiqua, Times New Roman, Times">
<p><!--[if gte vml 1]><v:shapetype id="_x0000_t159"
 coordsize="21600,21600" o:spt="159" adj="1404,10800" path="m@37@0c@38@1@39@3@40@0@41@1@42@3@43@0m@30@4c@31@6@32@5@33@4@34@6@35@5@36@4e">
 <v:formulas>
  <v:f eqn="val #0"/>
  <v:f eqn="prod @0 41 9"/>
  <v:f eqn="prod @0 23 9"/>
  <v:f eqn="sum 0 0 @2"/>
  <v:f eqn="sum 21600 0 #0"/>
  <v:f eqn="sum 21600 0 @1"/>
  <v:f eqn="sum 21600 0 @3"/>
  <v:f eqn="sum #1 0 10800"/>
  <v:f eqn="sum 21600 0 #1"/>
  <v:f eqn="prod @8 1 3"/>
  <v:f eqn="prod @8 2 3"/>
  <v:f eqn="prod @8 4 3"/>
  <v:f eqn="prod @8 5 3"/>
  <v:f eqn="prod @8 2 1"/>
  <v:f eqn="sum 21600 0 @9"/>
  <v:f eqn="sum 21600 0 @10"/>
  <v:f eqn="sum 21600 0 @8"/>
  <v:f eqn="sum 21600 0 @11"/>
  <v:f eqn="sum 21600 0 @12"/>
  <v:f eqn="sum 21600 0 @13"/>
  <v:f eqn="prod #1 1 3"/>
  <v:f eqn="prod #1 2 3"/>
  <v:f eqn="prod #1 4 3"/>
  <v:f eqn="prod #1 5 3"/>
  <v:f eqn="prod #1 2 1"/>
  <v:f eqn="sum 21600 0 @20"/>
  <v:f eqn="sum 21600 0 @21"/>
  <v:f eqn="sum 21600 0 @22"/>
  <v:f eqn="sum 21600 0 @23"/>
  <v:f eqn="sum 21600 0 @24"/>
  <v:f eqn="if @7 @19 0"/>
  <v:f eqn="if @7 @18 @20"/>
  <v:f eqn="if @7 @17 @21"/>
  <v:f eqn="if @7 @16 #1"/>
  <v:f eqn="if @7 @15 @22"/>
  <v:f eqn="if @7 @14 @23"/>
  <v:f eqn="if @7 21600 @24"/>
  <v:f eqn="if @7 0 @29"/>
  <v:f eqn="if @7 @9 @28"/>
  <v:f eqn="if @7 @10 @27"/>
  <v:f eqn="if @7 @8 @8"/>
  <v:f eqn="if @7 @11 @26"/>
  <v:f eqn="if @7 @12 @25"/>
  <v:f eqn="if @7 @13 21600"/>
  <v:f eqn="sum @36 0 @30"/>
  <v:f eqn="sum @4 0 @0"/>
  <v:f eqn="max @30 @37"/>
  <v:f eqn="min @36 @43"/>
  <v:f eqn="prod @0 2 1"/>
  <v:f eqn="sum 21600 0 @48"/>
  <v:f eqn="mid @36 @43"/>
  <v:f eqn="mid @30 @37"/>
 </v:formulas>
 <v:path textpathok="t" o:connecttype="custom" o:connectlocs="@40,@0;@51,10800;@33,@4;@50,10800"
  o:connectangles="270,180,90,0"/>
 <v:textpath on="t" fitshape="t" xscale="t"/>
 <v:handles>
  <v:h position="topLeft,#0" yrange="0,2229"/>
  <v:h position="#1,bottomRight" xrange="8640,12960"/>
 </v:handles>
 <o:lock v:ext="edit" text="t" shapetype="t"/>
</v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t159" alt="How this software&#13;&#10;was&#13;&#10;engineered"
 style='position:absolute;left:362.25pt;top:156pt;width:447pt;height:153pt;
 rotation:90;z-index:1' adj="952" fillcolor="lime" stroked="f">
 <v:fill color2="#0cf" focus="100%" type="gradient"/>
 <v:shadow on="t" color="navy" opacity="52429f" offset="-5pt,6pt"/>
 <v:textpath style='font-family:"Arial Black";v-rotate-letters:t;v-text-kern:t'
  trim="t" fitpath="t" xscale="f" string="How this software&#13;&#10;was&#13;&#10;engineered"/>
 <v:handles>
  <v:h position="topLeft,#0" yrange="0,4459"/>
  <v:h position="#1,bottomRight" xrange="8640,12960"/>
 </v:handles>
</v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout;position:
absolute;z-index:1;left:672px;top:12px;width:210px;height:604px'><img
width=210 height=604 src="engg_files/image001.gif"
alt="How this software&#13;&#10;was&#13;&#10;engineered" v:shapes="_x0000_s1026"></span><![endif]></p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp; Here the material collected from the internet for developing the 
software are </p>
<p>provided as links. Without the knowledge provided by these Internet info it </p>
<p>would have been impossible to realise the software. A short explanation for </p>
<p>each link is provided below.</p>
<p>&nbsp;</p>
<p><b><font size="7">Main Links : </font></b></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<ol>
  <li> Warning Suppression in C.</li>
  <li><a href="Dynamically%20Linked%20Libraries%20(DLL)%20Tutorial.htm">Dll Creation and compilation from VC++.</a></li>
  <li><a href="DLL%20tutorial%20Site.txt">Dll Tutorial Site Address </a></li>
  <li dir="ltr">
  <p dir="ltr"><a href="Dll%20View/readme.txt">Dll Export Viewer Software Readme</a></li>
  <li><a href="How%20to%20Create%20a%20Simple%20Win32%20DLL.htm">How to Create a simple Win32 Dll.</a></li>
  <li><a href="Relative%20referencing.txt">Relative Referencing Addressing Mode.</a></li>
  <li><a href="Smart%20Node%20Ads.doc">Advantages of Smartnode used in Data Structures.</a></li>
  <li dir="ltr">
  <p dir="ltr">
  Class Library with Dlls</li>
</ol>
<p>&nbsp;</p>
<p> <font size="5">Warning Suppression in C :</font></p>
<p>&nbsp;&nbsp;&nbsp; This summary gives a short tutorial on&nbsp; how to supress 
any warning in C and C++.</p>

<DIV class=majorwarning&nbsp; </DIV><!--Content type: DocStudio. Transform: devdiv2mtps.xslt.-->
<DIV id=mainSection>
<DIV id=mainBody>
<P>Allows selective modification of the behavior of compiler warning 
messages.</P>
<DIV class=section id=syntaxSection>
<DIV class=code id=ctl00_LibFrame_ctl03_other>
    <PRE class=code id=ctl00_LibFrame_ctl03other space="preserve">#pragma warning( warning-specifier : warning-number-list [; warning-specifier : warning-number-list...] )
#pragma warning( push[ ,n ] )ec#pragma warning( pop )</PRE></DIV></DIV>
<DIV class=MTPS_CollapsibleRegion>
<SCRIPT type=text/Javascript>
var ExpCollDivStr=ExpCollDivStr;
ExpCollDivStr = ExpCollDivStr + "ctl00_LibFrame_ctl04b28354d,";
var ExpCollImgStr = ExpCollImgStr;
 ExpCollImgStr = ExpCollImgStr + "ctl00_LibFrame_ctl04img,";
</SCRIPT>
<DIV class=section id=ctl00_LibFrame_ctl04b28354d style="DISPLAY: block">
<DIV id=ctl00_LibFrame_ctl04>
<P>The 4d style="DISPLAY: block can be one of the following.</P>
<DIV class=tableSection>
<TABLE cellPadding=5 cellSpacing=2 width="100%">
  <TBODY>
  <TR>
    <TH><I>Warning-specifierg=2 width="100%">
  <TBODY>
  <TR>
    <TH><I>Warning-specifier</I> </TH>
    <TH>Meaning </TH></TR>
  <TR>
    <TD>
      <P><B>1</B>, <B>2</B>, <B>3</B>, <B>4</B></P></TD>
    <TD>
      <P>Apply the given level to the specified warning(s). This also has the 
      effect of turning a specified warning on that is off by default.</P></TD></TR>
  <TR>
    <TD>
      <P><B>default</B></P></TD>
    <TD>
      <P>Reset warning behavior to its default value. This also has the effect 
      of turning a specified warning on that is off by default. The warning will 
      be generated at its default, documented, level. </P>
      <P>See <A href="http://msdn2.microsoft.com/en-us/library/23k5d385.aspx" 
      onclick="javascript:TrackThisClick('ctl00_LibFrame_ctl04','ctl00_LibFrame_ctl05',this);">Compiler 
      Warnings That Are Off by Default</A> for more information.</P></TD></TR>
  <TR>
    <TD>
      <P><B>disable</B></P></TD>
    <TD>
      <P>Do not issue the specified warning message(s).</P></TD></TR>
  <TR>
    <TD>
      <P><B>error</B></P></TD>
    <TD>
      <P>Report the specified warnings as errors.</P></TD></TR>
  <TR>
    <TD>
      <P><B>once</B></P></TD>
    <TD>
      <P>Display the specified message(s) only once.</P></TD></TR>
  <TR>
    <TD>
      <P><B>suppress</B></P></TD>
    <TD>
      <P>Pushes the current state of the pragma on the stack, disables the 
      specified warning for the next line, and then pops the warning stack, 
      resetting the pragma state. You can only specify one warning for each 
      <B>suppress</B> specifier, but multiple <B>warning</B> pragmas can operate 
      on one line of code.</P>
      <P><B>suppress</B> is only supported for C6000 warnings (code analysis 
      warnings), which are enabled with the <SPAN class=linkTerms><A 
      href="http://msdn2.microsoft.com/en-us/library/ms173498.aspx" 
      onclick="javascript:TrackThisClick('ctl00_LibFrame_ctl04','ctl00_LibFrame_ctl06',this);">/analyze 
      (Enterprise Code Analysis)</A></SPAN> compiler 
option.</P>< can contain any warning numbers. Multiple 
options can be specified in the same pragma directive as follows:</P>
<DIV class=code id=ctl00_LibFrame_ctl07_other>
    <PRE class=code id=ctl00_LibFrame_ctl07other space="preserve">#pragma warning( disable : 4507 34; once : 4385; error : 164 )</PRE></DIV>
<P>This is functionally equivalent to:</P>
<DIV class=code id=ctl00_LibFrame_ctl08_other>
    <PRE class=code id=ctl00_LibFrame_ctl08other space="preserve">// Disable warning messages 4507 and 4034.
#pragma warning( disable : 4507 34 )ning messages 4507 and 4034.
#pragma warning( disable : 4507 34 )

// Issue warning 4385 only once.
#pragma warning( once : 4385 )

// Report warning 4164 as an error.
#pragma warning( error : 164 )</PRE></DIV>
<P>The compiler will add 4000 to any warning number that is between 0 and 
999.</P>
<P>The compiler only supports up to 56 <TT>#pragma warning</TT> statements in a 
compiland.</P>
<P>For warning numbers in the range of 4700-4999, those associated with code 
generation, the state of the warning in effect when the compiler encounters the 
open curly brace of a function will be in effect for the rest of the function. 
Using the <B>warning</B> pragma inside the function to change the state of a 
warning greater than 4699 will only take effect after the end of the function. 
T pragmas to 
disable, and then restore, a code-generation warning message:</P>
<DIV class=code id=ctl00_LibFrame_ctl09_other>
    <PRE class=code id=ctl00_LibFrame_ctl09other space="preserve">// pragma_warning.cpp
// compile with: /W1other space="preserve">// pragma_warning.cpp
// compile with: /W1
#pragma warning(disable:4700)
void Test() {
   int x;
   int y = x;   // no C4700 here
   #pragma warning(default:4700)   // C4700 enabled after Test ends
}

int main() {
   int x;
   int y = x;   // C4700
}</PRE></DIV>
<P>Note that within a function body, the last setting of the <B>warning</B> 
pragma will be in effect for the entire function.</P>
<P>The <B>warning</B> pragma also supports the following syntax:</P>
<P><B>#pragma warning(</B>&nbsp;<B>push</B> [ <B>,</B><I>n</I> ] <B>)</B></P>
<P><B>#pragma warning(</B>&nbsp;<B>pop )</B></P>
<P>Where <I>n</I> represents a warning level (1 through 4). </P>
<P>The pragma <B>warning( push ) </B>stores the current warning state for all 
warnings. The pragma <B>warning( push, </B><I>n</I><B>) </B>stores the current 
state for all warnings and sets the global warning level to <I>n</I>. </P>
<P>The pragma <B>warning( pop ) </B>pops the last warning state pushed onto the 
stack. Any ch 
are undone. Consider this example:</P>
<DIV class=code id=ctl00_LibFrame_ctl10_other>
    <PRE class=code id=ctl00_LibFrame_ctl10other space="preserve">#pragma warning( push )
#pragma warning( disable : 4705 )eserve">#pragma warning( push )
#pragma warning( disable : 4705 )
#pragma warning( disable : 4706 )
#pragma warning( disable : 4707 )
// Some code
#pragma warning( pop ) </PRE></DIV>
<P>At the end of this code, <B>pop</B> restores the state of all warnings 
(including 4705, 4706, and 4707) to what it was at the beginning of the 
code.</P>
<P>When you write header files, you can use <B>push</B> and <B>pop</B> to ensure 
that changes to warning states made by the user do not prevent your headers from 
compiling properl at the end. Suppose, for example, you have a header that does not 
compile cleanly at warning level 4. The following code changes the warning level 
to 3 then restores the original warning level at the end of the header:</P>
<DIV class=code id=ctl00_LibFrame_ctl11_other>
    <PRE class=code id=ctl00_LibFrame_ctl11other space="preserve">#pragma warning( push, 3 )
// Declarations/ definitionspreserve">#pragma warning( push, 3 )
// Declarations/ definitions
#pragma warning( pop ) </PRE></DIV>
<P>See <A href="http://msdn2.microsoft.com/en-us/library/8c5ztk84.aspx" 
onclick="javascript:TrackThisClick('ctl00_LibFrame_ctl04','ctl00_LibFrame_ctl12',this);">/FI</A> 
and <A href="http://msdn2.microsoft.com/en-us/library/thxezb7y.aspx" 
onclick="javascript:TrackThisClick('ctl00_LibFrame_ctl04','ctl00_LibFrame_ctl13',this);">/w</A> 
for compiler options that help you suppress warnings.</P></DIV></DIV></DIV>


<p>&nbsp;</p>
<p><a href="Dynamically%20Linked%20Libraries%20(DLL)%20Tutorial.htm">
<font size="5">Dll Creation and compilation from VC++:</font></a></p>
<p>&nbsp;&nbsp;&nbsp; This allows us to create a simple Win32 dll from the VC++ 
IDE.</p>
<p>&nbsp;</p>
<p><font size="5"><a href="DLL%20tutorial%20Site.txt">Dll Tutorial Site Address 
:</a></font></p>
<p><font size="5">&nbsp;&nbsp;&nbsp; </font>A link address cut and paste in the 
address bar to open the page in an internet enabled system.</p>
<p>&nbsp;</p>
<p><font size="5"><a href="Dll%20View/readme.txt">Dll Export Viewer Software 
Readme :</a></font></p>
<p><font size="5">&nbsp;&nbsp;&nbsp; </font>A Shareware software downloaded from 
the Internet that allows you to see what any target Dll file exports. </p>
<p>&nbsp;</p>
<p><a href="How%20to%20Create%20a%20Simple%20Win32%20DLL.htm"><font size="5">How 
to Create a simple Win32 Dll :</font></a></p>
<p><font size="5">&nbsp;&nbsp;&nbsp; </font>Very detailed beginner's tutorial 
that shows with pictures how to create a simple Dll. </p>
<p>&nbsp;</p>
<p><a href="Relative%20referencing.txt"><font size="5">Relative Referencing 
Addressing Mode:</font></a></p>
<p><font size="5">&nbsp;&nbsp;&nbsp; </font>The software must work on all 
systems and not only on whichever system it was developed on. Since Drives 
partitions</p>
<p>&nbsp;and naming change from system to system we need Relative Referencing 
Addressing Mode. Click the link to know more.</p>
<p>&nbsp;</p>
<p><br>
<a href="Smart%20Node%20Ads.doc"><font size="5">Advantages of Smartnode used in Data Structures 
:</font></a></p>
<p>&nbsp;&nbsp;&nbsp; This was a seperate project on its own. SmartNode and 
associated Object-LinkList, Object-Stack, Object-Queue were all </p>
<p>developed to prove data structures can be developed using self adjusting 
intelligent nodes. Nodes are developed from a</p>
<p>&nbsp;template which is nothing but the SmartNode Class and defenitions of 
functions that create links between the node are given</p>
<p>&nbsp;within the Class itself. </p>
<p>&nbsp;</p>
<p dir="ltr"><font size="5">

Class Library with Dlls :</font></p>
<p>Another Dll file creating tutorial, is available in the site CSharpCorner .. If you want to create managed Dlls, dependent on .NET framework</p>
<p>&nbsp;</p>
<p><a href="Index.htm">Back</a></p>
<!--mstheme--></font>

</body>

</html>