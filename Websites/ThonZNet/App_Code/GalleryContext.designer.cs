#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Thon.Gallery
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ThonBase")]
	public partial class GalleryContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    #endregion
		
		public GalleryContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ThonSqlServer"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GalleryContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GalleryContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GalleryContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GalleryContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<FlickrCommand> FlickrCommands
		{
			get
			{
				return this.GetTable<FlickrCommand>();
			}
		}
		
		public System.Data.Linq.Table<PhotoCategoryJoin> PhotoCategoryJoins
		{
			get
			{
				return this.GetTable<PhotoCategoryJoin>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category
	{
		
		private int _CategoryID;
		
		private string _CategoryOwner;
		
		private string _CategoryName;
		
		private string _CategoryFlickrID;
		
		public Category()
		{
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
		
		[Column(Storage="_CategoryOwner", DbType="VarChar(50)")]
		public string CategoryOwner
		{
			get
			{
				return this._CategoryOwner;
			}
			set
			{
				if ((this._CategoryOwner != value))
				{
					this._CategoryOwner = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[Column(Storage="_CategoryFlickrID", DbType="VarChar(50)")]
		public string CategoryFlickrID
		{
			get
			{
				return this._CategoryFlickrID;
			}
			set
			{
				if ((this._CategoryFlickrID != value))
				{
					this._CategoryFlickrID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.FlickrCommands")]
	public partial class FlickrCommand
	{
		
		private int _FlickrCommandID;
		
		private string _FlickrCommandType;
		
		private System.Nullable<int> _FlickrCommandPhoto;
		
		private string _FlickrCommandParameter;
		
		public FlickrCommand()
		{
		}
		
		[Column(Storage="_FlickrCommandID", DbType="Int NOT NULL")]
		public int FlickrCommandID
		{
			get
			{
				return this._FlickrCommandID;
			}
			set
			{
				if ((this._FlickrCommandID != value))
				{
					this._FlickrCommandID = value;
				}
			}
		}
		
		[Column(Storage="_FlickrCommandType", DbType="VarChar(50)")]
		public string FlickrCommandType
		{
			get
			{
				return this._FlickrCommandType;
			}
			set
			{
				if ((this._FlickrCommandType != value))
				{
					this._FlickrCommandType = value;
				}
			}
		}
		
		[Column(Storage="_FlickrCommandPhoto", DbType="Int")]
		public System.Nullable<int> FlickrCommandPhoto
		{
			get
			{
				return this._FlickrCommandPhoto;
			}
			set
			{
				if ((this._FlickrCommandPhoto != value))
				{
					this._FlickrCommandPhoto = value;
				}
			}
		}
		
		[Column(Storage="_FlickrCommandParameter", DbType="VarChar(50)")]
		public string FlickrCommandParameter
		{
			get
			{
				return this._FlickrCommandParameter;
			}
			set
			{
				if ((this._FlickrCommandParameter != value))
				{
					this._FlickrCommandParameter = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.PhotoCategoryJoin")]
	public partial class PhotoCategoryJoin
	{
		
		private System.Nullable<int> _PhotoNumber;
		
		private System.Nullable<int> _CategoryNumber;
		
		public PhotoCategoryJoin()
		{
		}
		
		[Column(Storage="_PhotoNumber", DbType="Int")]
		public System.Nullable<int> PhotoNumber
		{
			get
			{
				return this._PhotoNumber;
			}
			set
			{
				if ((this._PhotoNumber != value))
				{
					this._PhotoNumber = value;
				}
			}
		}
		
		[Column(Storage="_CategoryNumber", DbType="Int")]
		public System.Nullable<int> CategoryNumber
		{
			get
			{
				return this._CategoryNumber;
			}
			set
			{
				if ((this._CategoryNumber != value))
				{
					this._CategoryNumber = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Photos")]
	public partial class Photo
	{
		
		private int _PhotoID;
		
		private System.Nullable<System.DateTime> _PhotoDate;
		
		private string _PhotoDescription;
		
		private System.Nullable<short> _PhotoWidth;
		
		private System.Nullable<short> _PhotoHeight;
		
		private System.Nullable<short> _PhotoResolution;
		
		private bool _PhotoVisible;
		
		private System.Data.Linq.Binary _PhotoOwner;
		
		private System.Data.Linq.Binary _PhotoFlickrID;
		
		public Photo()
		{
		}
		
		[Column(Storage="_PhotoID", DbType="Int NOT NULL")]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					this._PhotoID = value;
				}
			}
		}
		
		[Column(Storage="_PhotoDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PhotoDate
		{
			get
			{
				return this._PhotoDate;
			}
			set
			{
				if ((this._PhotoDate != value))
				{
					this._PhotoDate = value;
				}
			}
		}
		
		[Column(Storage="_PhotoDescription", DbType="VarChar(255)")]
		public string PhotoDescription
		{
			get
			{
				return this._PhotoDescription;
			}
			set
			{
				if ((this._PhotoDescription != value))
				{
					this._PhotoDescription = value;
				}
			}
		}
		
		[Column(Storage="_PhotoWidth", DbType="SmallInt")]
		public System.Nullable<short> PhotoWidth
		{
			get
			{
				return this._PhotoWidth;
			}
			set
			{
				if ((this._PhotoWidth != value))
				{
					this._PhotoWidth = value;
				}
			}
		}
		
		[Column(Storage="_PhotoHeight", DbType="SmallInt")]
		public System.Nullable<short> PhotoHeight
		{
			get
			{
				return this._PhotoHeight;
			}
			set
			{
				if ((this._PhotoHeight != value))
				{
					this._PhotoHeight = value;
				}
			}
		}
		
		[Column(Storage="_PhotoResolution", DbType="SmallInt")]
		public System.Nullable<short> PhotoResolution
		{
			get
			{
				return this._PhotoResolution;
			}
			set
			{
				if ((this._PhotoResolution != value))
				{
					this._PhotoResolution = value;
				}
			}
		}
		
		[Column(Storage="_PhotoVisible", DbType="Bit NOT NULL")]
		public bool PhotoVisible
		{
			get
			{
				return this._PhotoVisible;
			}
			set
			{
				if ((this._PhotoVisible != value))
				{
					this._PhotoVisible = value;
				}
			}
		}
		
		[Column(Storage="_PhotoOwner", DbType="VarBinary(25)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PhotoOwner
		{
			get
			{
				return this._PhotoOwner;
			}
			set
			{
				if ((this._PhotoOwner != value))
				{
					this._PhotoOwner = value;
				}
			}
		}
		
		[Column(Storage="_PhotoFlickrID", DbType="VarBinary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PhotoFlickrID
		{
			get
			{
				return this._PhotoFlickrID;
			}
			set
			{
				if ((this._PhotoFlickrID != value))
				{
					this._PhotoFlickrID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
